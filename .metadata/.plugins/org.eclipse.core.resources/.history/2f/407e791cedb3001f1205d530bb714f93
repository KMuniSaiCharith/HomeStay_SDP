package com.example.homestayplatform.controller;

import com.example.homestayplatform.dto.SignUpRequest;

import com.example.homestayplatform.dto.SignUpResponse;
import com.example.homestayplatform.model.User;
import com.example.homestayplatform.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.HttpStatus;

import java.util.Optional;

@CrossOrigin(origins = "http://localhost:5173")
@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserService userService;

    // Register a new user
    @PostMapping("/register")
    public ResponseEntity<User> registerUser(@RequestBody User user) {
        User newUser = userService.registerUser(user);
        return ResponseEntity.ok(newUser);
    }

    // Get user by username
    @GetMapping("/{username}")
    public ResponseEntity<User> getUserByUsername(@PathVariable String username) {
        Optional<User> user = userService.findByUsername(username);
        return user.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    // Get user by ID
    @GetMapping("/id/{id}")
    public ResponseEntity<User> getUserById(@PathVariable Long id) {
        Optional<User> user = userService.getUserById(id);
        return user.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }
    
    @PostMapping("/signup")
    public ResponseEntity<SignUpResponse> signupUser(@RequestBody SignUpRequest signupRequest) {
        // Call the service method to save the user
        boolean isSignupSuccessful = userService.signupUser(signupRequest.getUsername(), signupRequest.getPassword(), signupRequest.getRole());

        if (isSignupSuccessful) {
            return ResponseEntity.status(HttpStatus.CREATED).body(new SignUpResponse("User registered successfully"));
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new SignUpResponse("User registration failed: Username already exists"));
        }
    }
}

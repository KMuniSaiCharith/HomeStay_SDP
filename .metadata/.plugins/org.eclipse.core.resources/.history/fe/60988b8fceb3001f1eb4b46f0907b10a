package com.example.homestayplatform.controller;


import com.example.homestayplatform.model.ERole;
import com.example.homestayplatform.model.Role;
import com.example.homestayplatform.model.User;
import com.example.homestayplatform.payload.request.LoginRequest;
import com.example.homestayplatform.payload.request.SignupRequest;
import com.example.homestayplatform.payload.response.JWTResponse;
import com.example.homestayplatform.payload.response.MessageReponse;
import com.example.homestayplatform.repository.RoleRepository;
import com.example.homestayplatform.repository.UserRepository;
import com.example.homestayplatform.security.jwt.JwtUtils;
import com.example.homestayplatform.security.services.UserDetailsImpl;
import com.example.homestayplatform.security.services.UserService;

import jakarta.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.HttpStatus;

import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@CrossOrigin(origins = "http://localhost:5173")
@RestController
@RequestMapping("/api/users")
public class UserController {
	
	@Autowired
	AuthenticationManager authenticationManager;

    @Autowired
    private UserService userService;
    
    @Autowired
    RoleRepository roleRepository;
    
    @Autowired
    UserRepository userRepository;
    
    @Autowired
    PasswordEncoder encoder;
    
    @Autowired
    JwtUtils jwtutils;

    // Register a new user
    
 // Define the login API endpoint
    @PostMapping("/login")
    public ResponseEntity<?> authenticateUser(@Valid @RequestBody LoginRequest loginRequest){
    	Authentication authentication = authenticationManager.authenticate(
    			new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));
    	
    	SecurityContextHolder.getContext().setAuthentication(authentication);
    	String jwt = jwtutils.generateJwtToken(authentication);
    	
    	UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
    	List<String> roles = userDetails.getAuthorities().stream()
    			.map(item -> item.getAuthority())
    			.collect(Collectors.toList());
    	
    	return ResponseEntity.ok(new JWTResponse(jwt,
    			userDetails.getId(),
    			userDetails.getUsername(),
    			userDetails.getEmail(),
    			roles));
    }
    
    @PostMapping("/signup")
    public ResponseEntity<?> registerUser(@Valid @RequestBody SignupRequest signUpRequest) {
        if (userRepository.existsByUsername(signUpRequest.getUsername())) {
          return ResponseEntity
              .badRequest()
              .body(new MessageReponse("Error: Username is already taken!"));
        }

        if (userRepository.existsByEmail(signUpRequest.getEmail())) {
          return ResponseEntity
              .badRequest()
              .body(new MessageReponse("Error: Email is already in use!"));
        }

        // Create new user's account
        User user = new User(signUpRequest.getUsername(), 
                   signUpRequest.getEmail(),
                   encoder.encode(signUpRequest.getPassword()));
        
        Set<String> strRoles = signUpRequest.getRole();
        Set<Role> roles= new HashSet<>();
        
        if(strRoles == null) {
        	Role userRole = roleRepository.findByName(ERole.ROLE_USER)
        			.orElseThrow(() -> new RuntimeException("Error: Role is not found!"));
        	roles.add(userRole);
        } else {
        	strRoles.forEach(role -> {
        		switch (role) {
        		case "admin":
        			Role adminRole = roleRepository.findByName(ERole.ROLE_ADMIN)
        				.orElseThrow(() -> new RuntimeException("Error: Role is not found!"));
        			roles.add(adminRole);
        			break;
        		case "host":
        			Role hostRole = roleRepository.findByName(ERole.ROLE_HOST)
        				.orElseThrow(() -> new RuntimeException("Error: Role is not found!"));
        			roles.add(hostRole);
        			break;
        		case "guide":
        			Role guideRole = roleRepository.findByName(ERole.ROLE_GUIDE)
        				.orElseThrow(() -> new RuntimeException("Error: Role is not found!"));
        			roles.add(guideRole);
        			break;
        		default:
        			Role userRole = roleRepository.findByName(ERole.ROLE_USER)
        					.orElseThrow(() -> new RuntimeException("Error: Role is not found!"));
        			roles.add(userRole);
        			
        			
        		}
        	});
        }
        
        user.setRoles(roles);
        userRepository.save(user);
        
        return ResponseEntity.ok(new MessageReponse("User registered successfully"));
    }
}
